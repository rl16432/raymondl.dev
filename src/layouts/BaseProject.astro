---
import { Section } from '@/components';
import type { ProjectFrontmatter } from '@/content/_schemas';
import Base from '@/layouts/Base.astro';
import { AppConfig } from '@/utils/AppConfig';

export interface Props {
  frontmatter: ProjectFrontmatter;
}

type ClassModifiers = {
  [key: string]: string[];
};

const PROSE_MODIFIERS: ClassModifiers = {
  'prose-a': [
    'prose-a:text-cyan-400',
    'prose-a:no-underline',
    'hover:prose-a:underline',
  ],
  'prose-img': [
    'prose-img:rounded-lg',
    'prose-img:border-2',
    'prose-img:border-sky-500',
  ],
  'prose-table': ['prose-table:text-base'],
};

const { frontmatter } = Astro.props as Props;
const title = `${frontmatter.name} | Projects | ${AppConfig.title}`;
---

<Base head={{ title, description: frontmatter.description }}>
  <Section>
    <div
      class={`prose prose-invert mx-auto mt-8 max-w-3xl ${Object.values(
        PROSE_MODIFIERS,
      )
        .map((arr) => arr.join(' '))
        .join(' ')}`}
    >
      <h1 class="mb-2 text-center">{frontmatter.name}</h1>
      <div class="w-full text-center">
        {
          () => {
            if (frontmatter.source === undefined) {
              return <Fragment />;
            }
            if (typeof frontmatter.source === 'string') {
              return (
                <a target="_blank" href={frontmatter.source}>
                  View source code
                </a>
              );
            }
            return (
              <>
                <div class="font-normal">View source code below</div>
                <div class="flex flex-row justify-center gap-5">
                  {Object.entries(frontmatter.source).map(([name, url]) => (
                    <div>
                      <a target="_blank" href={url}>
                        {name}
                      </a>
                    </div>
                  ))}
                </div>
              </>
            );
          }
        }
      </div>
      <slot />
    </div>
  </Section>
</Base>
